Open RPC Servers Data Type - Product Requirements Document

# Overview
Implement a new data type system for Open RPC servers in the Nimiq awesome list, following the existing patterns used for apps and resources. The system should parse JSON data and generate both markdown files and distribution JSON files with absolute GitHub URLs.

# Data Source Requirements
- Initial data from: https://raw.githubusercontent.com/nimiq/developer-center/refs/heads/new-layout/rpc-client/open-servers.md
- Create `nimiq-rpc-servers.json` in `src/data/` directory
- Support two network types: mainnet and testnet
- Include server metadata: name, endpoint, maintainer, status link

# Data Schema Requirements
Create Valibot schema for RPC server validation:
- name: string (required) - Server name
- endpoint: string (required) - RPC endpoint URL
- maintainer: string (required) - GitHub username or organization
- statusLink: string (optional) - Link to status/limits information
- network: enum ['mainnet', 'testnet'] (required) - Network type
- description: string (optional) - Server description

# File Structure Requirements
1. `src/data/nimiq-rpc-servers.json` - Source data file
2. `src/rpc-servers.md` - Generated markdown file
3. `src/dist/rpc-servers.json` - Distribution JSON with absolute URLs
4. Add RPC servers section to README.md using automd markers

# Build System Integration
Extend `src/scripts/build.ts`:
1. Add RPC servers schema validation
2. Generate categorized markdown by network type
3. Create distribution JSON with absolute GitHub URLs
4. Update README.md with RPC servers content
5. Include in table of contents generation

# Markdown Generation Requirements
Generate `src/rpc-servers.md` with:
- Header: "# Open RPC Servers"
- Warning section about production use limitations
- Separate sections for Mainnet and Testnet
- Each server displayed with: name, endpoint, maintainer link
- Include status/limits links where available
- Responsive table format for mobile compatibility

# README.md Integration
Add RPC servers section between automd markers:
- Include in main table of contents
- Show server counts by network type
- Link to detailed rpc-servers.md file
- Maintain consistency with existing sections

# Distribution File Requirements
Create `src/dist/rpc-servers.json`:
- Convert relative paths to absolute GitHub URLs
- Group servers by network type
- Include all metadata fields
- Follow existing distribution JSON format patterns

# Initial Data Population
Extract and convert data from developer-center source:
- NimiqWatch mainnet server (https://rpc.nimiqwatch.com)
- NimiqWatch testnet server (https://rpc.testnet.nimiqwatch.com/)
- Maintainer: sisou (GitHub username)
- Add appropriate descriptions and status links

# Validation Requirements
- Validate URL format for endpoints
- Ensure maintainer GitHub usernames are valid format
- Validate network enum values
- Required field validation using Valibot schemas

# Documentation Requirements
- Add RPC servers section to existing documentation
- Include schema definitions in comments
- Document the build process integration
- Update architecture notes in CLAUDE.md

# Testing Requirements
- Validate JSON schema parsing
- Test markdown generation output
- Verify distribution JSON format
- Ensure README.md automd integration works
- Test build process with new RPC servers data

# GitHub Actions Integration
Ensure the existing workflow (`.github/workflows/update-apps.yml`) processes RPC servers:
- Include rpc-servers.json in file monitoring
- Trigger builds on RPC server data changes
- Auto-commit generated files

# Success Criteria
1. RPC servers data can be managed via JSON file
2. Markdown files are automatically generated
3. Distribution JSON includes absolute URLs
4. README.md is automatically updated
5. Build process validates all data
6. System follows existing architectural patterns
7. GitHub Actions workflow processes changes
8. All generated files maintain consistent formatting