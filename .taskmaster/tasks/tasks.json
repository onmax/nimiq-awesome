{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Create RPC Server Data Schema",
        "description": "Define and implement Valibot schema for RPC server validation including required fields and network enum",
        "details": "Create the RPC server schema in src/scripts/build.ts similar to existing schemas. Define RPCServerSchema with fields: name (string), endpoint (string), maintainer (string), statusLink (nullable string), network (union of 'mainnet' and 'testnet' literals), description (nullable string). Also define RPCServer interface and NetworkType type. Place these definitions near the existing AppSchema and ResourceSchema definitions around line 209-230.",
        "testStrategy": "Validate schema by parsing sample RPC server data objects with both valid and invalid data. Test that required fields throw errors when missing and optional fields accept null values. Verify network enum only accepts 'mainnet' or 'testnet' values.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Extract Initial RPC Server Data",
        "description": "Parse and extract RPC server data from the developer-center source URL and create initial JSON data file",
        "details": "Fetch content from https://raw.githubusercontent.com/nimiq/developer-center/refs/heads/new-layout/rpc-client/open-servers.md and parse the markdown to extract server information. Create src/data/nimiq-rpc-servers.json with initial data including NimiqWatch mainnet (https://rpc.nimiqwatch.com) and testnet (https://rpc.testnet.nimiqwatch.com/) servers with maintainer 'sisou'. Structure data according to the schema created in task 1.",
        "testStrategy": "Verify the generated JSON file contains correct server entries with all required fields. Validate the JSON structure matches the schema. Test that URLs are properly formatted and network types are correctly assigned.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Integrate RPC Server Build Process",
        "description": "Extend the build script to process RPC server data including validation, markdown generation, and distribution file creation",
        "details": "In src/scripts/build.ts, add RPC server processing to the main() function. After line 15, add path for nimiqRpcServersJson. Around line 470 (after resources processing), add: 1) Read and parse nimiq-rpc-servers.json, 2) Validate with RPCServerArraySchema using safeParse, 3) Generate rpc-servers.md with sections for mainnet and testnet, 4) Create distribution JSON with absolute GitHub URLs. Follow the same pattern used for apps, resources, and exchanges.",
        "testStrategy": "Run the build script and verify: 1) RPC servers JSON is validated without errors, 2) rpc-servers.md is generated with correct formatting, 3) src/data/dist/rpc-servers.json is created with absolute URLs, 4) Build process completes successfully without breaking existing functionality.",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Add RPC server file path constants and imports",
            "description": "Add nimiqRpcServersJson file path constant and import RPCServerArraySchema following existing pattern in build.ts",
            "dependencies": [],
            "details": "In src/scripts/build.ts around line 15, add 'const nimiqRpcServersJson = join(dataDir, \"nimiq-rpc-servers.json\")' following the pattern of other JSON file paths. Import RPCServerArraySchema from the validation module. Ensure imports are organized consistently with existing code structure.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement RPC server JSON reading and validation",
            "description": "Add JSON file reading and schema validation using safeParse pattern similar to existing validation code",
            "dependencies": [
              "3.1"
            ],
            "details": "Around line 470 in main() function after resources processing, add: 1) Read nimiq-rpc-servers.json file using readFile, 2) Parse JSON content, 3) Validate using RPCServerArraySchema.safeParse() following the same error handling pattern as lines 424-433, 4) Store validated data in rpcServers variable for further processing.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Integrate RPC server markdown generation",
            "description": "Add RPC server markdown generation call in the main build process following existing patterns",
            "dependencies": [
              "3.2"
            ],
            "details": "In main() function after RPC server validation, call generateRpcServersMarkdown function passing the validated rpcServers data. Write the generated markdown content to src/rpc-servers.md file using writeFile. Follow the same pattern used for apps.md, resources.md, and exchanges.md generation.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Create RPC server distribution JSON with absolute URLs",
            "description": "Generate distribution JSON file with network grouping and absolute GitHub URLs for external consumption",
            "dependencies": [
              "3.3"
            ],
            "details": "After markdown generation, create distribution JSON by: 1) Grouping RPC servers by network type (mainnet/testnet), 2) Converting any relative asset paths to absolute GitHub URLs using baseGithubRawUrl, 3) Writing structured data to src/data/dist/rpc-servers.json with format { mainnet: [...], testnet: [...] }, 4) Following the same pattern as distExchanges creation.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "Generate RPC Servers Markdown",
        "description": "Implement markdown generation logic for RPC servers with network categorization and responsive table format",
        "details": "Create generateRpcServersMarkdown function that: 1) Adds header '## Open RPC Servers', 2) Includes warning about production use limitations, 3) Groups servers by network (Mainnet/Testnet sections), 4) For each server displays: name as link to endpoint, maintainer as GitHub link, status link if available, 5) Use list format similar to exchanges section for mobile compatibility. Place function before main() and call it during build process.",
        "testStrategy": "Verify generated markdown contains: proper headers, warning section, servers grouped by network type, clickable links for endpoints and maintainers, optional status links displayed when available. Test markdown renders correctly and links are functional.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Update README with RPC Servers",
        "description": "Add RPC servers section to README.md using automd markers and update table of contents",
        "details": "In build script's README update section (around line 595-650), add logic to: 1) Define rpcServersStartMarker and rpcServersEndMarker for automd, 2) Find and replace content between markers with generated RPC servers markdown, 3) If markers don't exist, add them after exchanges section, 4) Ensure TOC generation includes RPC servers section. Add 'Open RPC Servers' to the TOC between Exchanges and other sections.",
        "testStrategy": "After build, verify README.md contains: RPC servers section with automd markers, updated table of contents with RPC servers link, proper formatting and content between markers, all existing sections remain intact.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Create Distribution JSON for RPC Servers",
        "description": "Generate distribution JSON file with absolute GitHub URLs for external consumption",
        "details": "In build script after processing RPC servers (around line 560), create distribution JSON: 1) Group servers by network type in an object structure, 2) Convert any relative paths to absolute GitHub URLs using baseGithubRawUrl, 3) Write to src/data/dist/rpc-servers.json, 4) Follow the same pattern as distExchanges but group by network. Structure: { mainnet: [...], testnet: [...] }.",
        "testStrategy": "Verify distribution JSON file: contains all RPC servers grouped by network, uses absolute GitHub URLs for any asset paths, maintains all metadata fields, can be consumed by external applications.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Update GitHub Actions Workflow",
        "description": "Modify the workflow to monitor RPC server data changes and trigger builds",
        "details": "Edit .github/workflows/update-apps.yml to: 1) Add 'src/data/nimiq-rpc-servers.json' to the paths trigger list (around line 6), 2) Add exclusion for 'src/data/dist/rpc-servers.json' in the ignore list (around line 10), 3) Update commit message to mention RPC servers when relevant. No other changes needed as the build script handles everything else.",
        "testStrategy": "Push changes to nimiq-rpc-servers.json and verify: workflow triggers automatically, build process runs successfully, generated files are committed, commit message reflects the changes appropriately.",
        "priority": "low",
        "dependencies": [
          6
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Add URL Validation for RPC Endpoints",
        "description": "Implement validation logic to ensure RPC endpoint URLs are properly formatted",
        "details": "In the RPC server validation section of build script, add URL validation: 1) Check that endpoint starts with 'http://' or 'https://', 2) Validate URL format using URL constructor in try-catch, 3) Ensure maintainer follows GitHub username format (alphanumeric, hyphens), 4) Log errors for invalid URLs but don't fail build. Add validation after schema validation similar to path checking for apps.",
        "testStrategy": "Test with various URL formats: valid HTTPS URLs pass, invalid URLs log warnings, maintainer usernames are validated, build continues even with warnings, all valid entries are processed correctly.",
        "priority": "low",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Update Documentation",
        "description": "Add RPC servers documentation to CLAUDE.md architecture notes",
        "details": "Update CLAUDE.md file to document: 1) New data source file nimiq-rpc-servers.json, 2) Generated files (rpc-servers.md, dist/rpc-servers.json), 3) RPC server data structure and schema, 4) Build process integration for RPC servers, 5) Add to the 'Data Structure' section mentioning RPC servers categorized by network type. Update 'Generated Files' and 'Build Process' sections accordingly.",
        "testStrategy": "Review CLAUDE.md to ensure: all RPC server components are documented, architecture description is accurate and complete, examples include RPC server data structure, documentation helps future developers understand the system.",
        "priority": "low",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Test End-to-End Build Process",
        "description": "Perform comprehensive testing of the entire RPC servers feature implementation",
        "details": "Run full build process and verify: 1) pnpm install completes successfully, 2) pnpm run build processes all data types including RPC servers, 3) pnpm run lint passes without errors, 4) All generated files have correct content and formatting, 5) README.md is properly updated with RPC servers section, 6) Distribution JSONs contain absolute URLs, 7) GitHub Action would trigger on RPC server changes, 8) No regression in existing functionality.",
        "testStrategy": "Execute complete build workflow: clean install dependencies, run build script, check all output files, validate generated markdown renders correctly, test with different RPC server data scenarios, ensure backward compatibility with existing features.",
        "priority": "high",
        "dependencies": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Execute Full Build Workflow",
            "description": "Run complete build process including dependency installation and build script execution",
            "dependencies": [],
            "details": "Execute: 1) cd src && pnpm install to ensure all dependencies are properly installed, 2) cd src && pnpm run build to run the complete build process, 3) Verify build completes without errors, 4) Check that all expected output files are generated, 5) Ensure no build warnings or failures occur during the process.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Validate Generated Files Content",
            "description": "Verify all generated markdown and distribution files have correct content and formatting",
            "dependencies": [
              "10.1"
            ],
            "details": "Check generated files: 1) Verify src/rpc-servers.md contains mainnet and testnet sections with proper formatting, 2) Validate src/data/dist/rpc-servers.json has absolute GitHub URLs, 3) Ensure all existing generated files (apps.md, resources.md, exchanges.md) are unchanged, 4) Confirm distribution JSONs maintain correct structure and content.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Test README Integration",
            "description": "Verify README.md is properly updated with RPC servers section and table of contents",
            "dependencies": [
              "10.2"
            ],
            "details": "Validate README.md updates: 1) Confirm RPC servers section appears between automd markers, 2) Check table of contents includes 'Open RPC Servers' link, 3) Verify section placement between Exchanges and other sections, 4) Ensure all existing README content remains intact, 5) Test that automd markers are properly formatted.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Validate Linting and Code Quality",
            "description": "Run linting process and ensure all code quality checks pass",
            "dependencies": [
              "10.3"
            ],
            "details": "Execute quality checks: 1) Run cd src && pnpm run lint to check for any linting errors, 2) If errors exist, run pnpm run lint:fix to auto-fix issues, 3) Verify all TypeScript types are correct, 4) Ensure code follows project conventions, 5) Confirm no new linting violations are introduced by RPC server implementation.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Test Workflow Integration and Regression",
            "description": "Verify GitHub Actions workflow triggers and ensure no regression in existing functionality",
            "dependencies": [
              "10.4"
            ],
            "details": "Perform integration testing: 1) Verify .github/workflows/update-apps.yml would trigger on nimiq-rpc-servers.json changes, 2) Test that all existing build functionality works correctly, 3) Confirm apps, resources, and exchanges processing remains unaffected, 4) Validate that asset management and distribution file generation work properly, 5) Ensure no breaking changes to existing API or file structures.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-09-19T08:28:31.364Z",
      "updated": "2025-09-19T08:44:08.379Z",
      "description": "Tasks for master context"
    }
  }
}